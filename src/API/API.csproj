<Project Sdk="Microsoft.NET.Sdk.Web">
  <PropertyGroup>
    <ContainerFamily>noble-chiseled</ContainerFamily>
    <ContainerRepository>martincostello/api</ContainerRepository>
    <Description>Martin Costello's API</Description>
    <EnableConfigurationBindingGenerator>true</EnableConfigurationBindingGenerator>
    <EnableRequestDelegateGenerator>true</EnableRequestDelegateGenerator>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <InvariantGlobalization>true</InvariantGlobalization>
    <OpenApiDocumentsDirectory>$([System.IO.Path]::Combine($(ArtifactsPath), 'openapi'))</OpenApiDocumentsDirectory>
    <OpenApiGenerateDocuments>true</OpenApiGenerateDocuments>
    <OutputType>Exe</OutputType>
    <PyroscopeApplicationName>api.martincostello.com</PyroscopeApplicationName>
    <PublishAot>true</PublishAot>
    <PublishSelfContained>true</PublishSelfContained>
    <RootNamespace>MartinCostello.Api</RootNamespace>
    <TargetFramework>net9.0</TargetFramework>
    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
    <TypeScriptToolsVersion>latest</TypeScriptToolsVersion>
    <UserSecretsId>api.martincostello.com</UserSecretsId>
  </PropertyGroup>
  <ItemGroup>
    <ContainerPort Include="8080" Type="tcp" />
    <Content Update="appsettings.json" CopyToOutputDirectory="PreserveNewest" />
    <PyroscopeLabels Include="api" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="MartinCostello.OpenApi.Extensions" />
    <PackageReference Include="Microsoft.AspNetCore.AzureAppServices.HostingStartup" />
    <PackageReference Include="Microsoft.AspNetCore.OpenApi" />
    <PackageReference Include="Microsoft.Extensions.ApiDescription.Server" NoWarn="RT0003" PrivateAssets="all" />
    <PackageReference Include="Microsoft.OpenApi" />
    <PackageReference Include="Microsoft.TypeScript.MSBuild" />
    <PackageReference Include="OpenTelemetry.Exporter.OpenTelemetryProtocol" />
    <PackageReference Include="OpenTelemetry.Extensions.Hosting" />
    <PackageReference Include="OpenTelemetry.Instrumentation.AspNetCore" />
    <PackageReference Include="OpenTelemetry.Instrumentation.Http" />
    <PackageReference Include="OpenTelemetry.Instrumentation.Process" />
    <PackageReference Include="OpenTelemetry.Instrumentation.Runtime" />
    <PackageReference Include="OpenTelemetry.Resources.Azure" />
    <PackageReference Include="OpenTelemetry.Resources.Container" />
    <PackageReference Include="OpenTelemetry.Resources.OperatingSystem" />
    <PackageReference Include="OpenTelemetry.Resources.ProcessRuntime" />
    <PackageReference Include="Pyroscope" />
    <PackageReference Include="Pyroscope.OpenTelemetry" />
    <PackageReference Include="RazorSlices" />
    <PackageReference Include="Sentry.AspNetCore" />
  </ItemGroup>
  <ItemGroup>
    <Content Update="coverage\**;package.json;package-lock.json;tsconfig.json" CopyToPublishDirectory="Never" />
    <None Remove="assets\scripts\**\*.ts" />
    <TypeScriptCompile Include="assets\scripts\**\*.ts" />
  </ItemGroup>
  <Target Name="BundleAssets" BeforeTargets="BeforeBuild" DependsOnTargets="RestoreNpmPackages">
    <Exec Command="npm run build" Condition=" !Exists('$(MSBuildThisFileDirectory)\wwwroot\assets\js\main.js') " />
  </Target>
  <Target Name="AddGeneratedContentItems" BeforeTargets="AssignTargetPaths" Condition=" '$(CI)' != '' ">
    <ItemGroup>
      <Content Include="wwwroot/**" CopyToPublishDirectory="PreserveNewest" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder);@(Content)" />
    </ItemGroup>
  </Target>
  <!--
    HACK Pyroscope's profiler does not work with native AoT
  -->
  <PropertyGroup Condition=" '$(UsePyroscope)' == 'true' ">
    <PublishAot>false</PublishAot>
  </PropertyGroup>
  <!-- HACK Workaround for https://github.com/getsentry/sentry-dotnet/issues/3928 -->
  <ItemGroup Condition=" $([System.OperatingSystem]::IsWindows()) ">
    <LinkerArg Include="/NODEFAULTLIB:MSVCRT" />
  </ItemGroup>
  <!-- HACK Workaround https://github.com/getsentry/sentry-dotnet/issues/4116 by adding the native binaries for Sentry to the container -->
  <Target Name="_AddSentryNativeBinaries" BeforeTargets="AssignTargetPaths" Condition="$([System.OperatingSystem]::IsLinux())">
    <PropertyGroup>
      <libcurlBinariesPath>/usr/lib/x86_64-linux-gnu</libcurlBinariesPath>
    </PropertyGroup>
    <Error Condition="!Exists('$(libcurlBinariesPath)')" Text="Cannot find the libcurl binaries directory '$(libcurlBinariesPath)'." />
    <ItemGroup>
      <Content Include="$(libcurlBinariesPath)\**\libcurl*" CopyToPublishDirectory="PreserveNewest" />
      <Content Include="$(libcurlBinariesPath)\**\libnghttp2*" CopyToPublishDirectory="PreserveNewest" />
    </ItemGroup>
  </Target>
  <Target Name="_ConfigureSentryNative" BeforeTargets="PublishContainer" DependsOnTargets="ComputeContainerConfig" Condition="$([System.OperatingSystem]::IsLinux())">
    <ItemGroup>
      <ContainerEnvironmentVariables Include="LD_PRELOAD" Value="$(ContainerWorkingDirectory)libnghttp2.so" />
    </ItemGroup>
  </Target>
</Project>
